<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.FindProjectItem(this.Host.TemplateFile).ContainingProject as EnvDTE.Project;

  var projectPath = new FileInfo(project.FullName).DirectoryName;

  var lookup = new Dictionary<EnvDTE.ProjectItem, EnvDTE.ProjectItem>(); 
  foreach (EnvDTE.ProjectItem item in project.ProjectItems) {
	if (IsDirectory(item, projectPath)) {
		var directory = item;
		if (item.Name != "Deployment")
			continue;
		
		foreach (EnvDTE.ProjectItem folder in item.ProjectItems)
		{
			foreach (EnvDTE.ProjectItem subItem in GetProjectItemsRecursively(folder.ProjectItems)) {
				if (!IsValid(subItem))
					continue;

				lookup.Add(subItem, folder);
			
			}
		}
	}
  }
#>
using System;
using System.Collections.Generic;

namespace <#= project.Name #>
{
    public class Listings
    {
		public enum ListingTypes {
			MasterPage,
			Page,
			Script,
			StyleLibrary,
			Unknown
		}

		public class Listing {
			public string Source { get; set; }
			public ListingTypes Type { get; set; }

		}

		public static string VersionNumber { get { return "1.0.0.0";}}

		public static readonly IList<Listing> Items = new List<Listing>();

		static Listings()
		{
<# foreach (var item in lookup.Keys) { #>
			Items.Add(new Listing() { Source = @"<#= GetSource(item, projectPath) #>",
									  Type = <#= GetType(item, lookup[item]) #> });
<# } #>
		}
	}
}


<#+

  public string ConvertToWeb(string input)
  {
	return input.Replace('\\', '/');
  }

  public string GetSource(EnvDTE.ProjectItem item, string projectPath) {
	var offset = projectPath.Length + 1;
	return ConvertToWeb(item.FileNames[0].Substring(offset));
  }

  public string GetUrl(EnvDTE.ProjectItem item, string projectPath) {
	var offset = projectPath.Length + 1;
	return ConvertToWeb(item.FileNames[0].Substring(offset));
  }

  public string GetType(EnvDTE.ProjectItem item, EnvDTE.ProjectItem topLevel) {
  
    var directoryName = new DirectoryInfo(topLevel.FileNames[0]).Name;
	switch (directoryName) {
		case "MasterPageGallery":
			return "ListingTypes.MasterPage";
		case "Pages":
			return "ListingTypes.Page";
		case "Scripts":
			return "ListingTypes.Script";
		case "Style Library":
			return "ListingTypes.StyleLibrary";
		default:
			return "ListingTypes.Unknown";
	}
  }

  public bool IsValid(EnvDTE.ProjectItem item) {
	
	string [] extensions = "aspx, ascx, master, js, css".Split(',').Select(x => "." + x.Trim()).Distinct().ToArray();
	
	var path = item.FileNames[0];
	var filename = System.IO.Path.GetFileName(path);
	if (filename.StartsWith("_"))
		return false;

	var extension = (System.IO.Path.GetExtension(filename) ?? "").ToLower();
	return (extensions.Contains(extension));
  }

  public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
  {
      var ret = new List<EnvDTE.ProjectItem>();
      if (items == null) return ret;
      foreach(EnvDTE.ProjectItem item in items)
      {
        ret.Add(item);
        ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
      }
      return ret;
  }

  public bool IsDirectory(EnvDTE.ProjectItem projectItem, string projectPath) {
  	string [] defaultFolders = "Pages, Scripts".Split(',').Select(x => x.Trim()).Distinct().ToArray();

	var offset = projectPath.Length + 1;
	string folderName = projectItem.FileNames[0].Substring(offset).Split('\\')[0];
	
	var path = projectItem.FileNames[0];
	if (((System.IO.File.GetAttributes(path) & FileAttributes.Directory) == FileAttributes.Directory) && !defaultFolders.Contains(folderName))
		return true;
	return false;
  }

#>